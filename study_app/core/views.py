import openai
import PyPDF2
from django.shortcuts import render, redirect
from django.conf import settings
from django.contrib.auth.decorators import login_required
from django.contrib.auth import login, authenticate
from django.contrib.auth.views import LoginView
from django.http import HttpResponse
from transformers import pipeline as transformers_pipeline
from .models import Test
from .forms import CustomUserCreationForm
import os
import logging

# Initialize logger
logger = logging.getLogger(__name__)

# OpenAI API Key
openai.api_key = settings.OPENAI_API_KEY

# Cached AI model
_model_cache = None

def get_cached_model():
    global _model_cache
    if _model_cache is None:
        _model_cache = transformers_pipeline(
            "text-generation",
            model="distilgpt2",
            device="cpu"
        )
    return _model_cache

def test_textbook_view(request):
    """View to display available textbooks."""
    media_path = settings.MEDIA_ROOT
    files = []

    # Fetch all PDF files in the media directory
    for root, dirs, filenames in os.walk(media_path):
        for file_name in filenames:
            if file_name.lower().endswith('.pdf'):
                relative_path = os.path.relpath(os.path.join(root, file_name), media_path)
                files.append({
                    'name': os.path.splitext(file_name)[0],
                    'url': f"{settings.MEDIA_URL}{relative_path.replace(os.sep, '/')}"
                })

    context = {'files': sorted(files, key=lambda x: x['name'])}
    return render(request, 'core/test_textbook.html', context)

def test_creation_view(request):
    """View to generate test questions from a selected PDF."""
    if request.method == 'POST':
        try:
            pdf_url = request.POST.get('pdf_url')
            start_page = int(request.POST.get('start_page', 0))
            end_page = int(request.POST.get('end_page', 0))

            if not pdf_url or start_page <= 0 or end_page <= 0 or start_page > end_page:
                raise ValueError("Invalid form data")

            pdf_path = os.path.join(settings.MEDIA_ROOT, os.path.basename(pdf_url))
            with open(pdf_path, 'rb') as pdf_file:
                pdf_reader = PyPDF2.PdfReader(pdf_file)
                if start_page > len(pdf_reader.pages) or end_page > len(pdf_reader.pages):
                    raise ValueError("Page range exceeds the number of pages in the PDF.")
                extracted_text = "".join(
                    pdf_reader.pages[page_num].extract_text() for page_num in range(start_page - 1, end_page)
                )

            # Generate questions using AI
            generator = get_cached_model()
            prompt = f"Generate 10 multiple-choice questions with 4 options each (1 correct) based on the following text:\n\n{extracted_text[:1000]}"
            response = generator(prompt, max_length=1500, num_return_sequences=1)
            generated_questions = response[0]['generated_text']

            # Parse the generated questions
            questions = parse_generated_questions(generated_questions)
            if not questions:
                raise ValueError("No questions were generated by the AI model.")

            # Store questions in session
            request.session['questions'] = questions
            request.session['current_question_index'] = 0

            return redirect('test_question')

        except Exception as e:
            logger.error(f"Error in test_creation_view: {e}")
            return redirect('test_textbook')

    return redirect('test_textbook')

def parse_generated_questions(generated_text):
    """Parse AI-generated text into structured questions."""
    questions = []
    for block in generated_text.split("\n\n"):
        lines = block.split("\n")
        if len(lines) < 5:
            continue
        question = lines[0]
        options = lines[1:5]
        correct_answer = lines[5].split(":")[1].strip() if len(lines) > 5 else None
        questions.append({
            'question': question,
            'options': options,
            'answer': correct_answer
        })
    return questions

def test_question_view(request):
    """View to display and handle test questions."""
    if request.method == 'POST':
        questions = request.session.get('questions', [])
        current_question_index = request.session.get('current_question_index', 0)

        if current_question_index < len(questions):
            current_question = questions[current_question_index]
            selected_answer = request.POST.get('selected_answer')
            is_correct = selected_answer == current_question['answer']

            # Store the result in the session
            results = request.session.get('results', [])
            results.append({
                'question': current_question['question'],
                'options': current_question['options'],
                'selected_answer': selected_answer,
                'correct_answer': current_question['answer'],
                'is_correct': is_correct
            })
            request.session['results'] = results

            # Move to the next question
            request.session['current_question_index'] = current_question_index + 1

            if current_question_index + 1 < len(questions):
                return redirect('test_question')
            else:
                return redirect('test_result')

    else:
        questions = request.session.get('questions', [])
        current_question_index = request.session.get('current_question_index', 0)

        if current_question_index < len(questions):
            current_question = questions[current_question_index]
            return render(request, 'core/test_question.html', {
                'question': current_question['question'],
                'answers': current_question['options'],
                'current_question_index': current_question_index + 1,
                'total_questions': len(questions)
            })
        else:
            return redirect('test_result')

def test_result_view(request):
    """View to display test results."""
    results = request.session.get('results', [])
    total_questions = len(results)
    correct_answers = sum(1 for result in results if result['is_correct'])
    wrong_answers_count = total_questions - correct_answers

    context = {
        'total_questions': total_questions,
        'correct_answers': correct_answers,
        'wrong_answers_count': wrong_answers_count,
        'results': results
    }
    return render(request, 'core/test_result.html', context)

@login_required
def profile_view(request):
    """View to display user profile and tests."""
    tests = Test.objects.all()
    context = {
        'username': request.user.username,
        'tests': tests,
    }
    return render(request, 'core/profile.html', context)

class CustomLoginView(LoginView):
    """Custom login view."""
    template_name = 'core/login.html'

    def form_valid(self, form):
        username = form.cleaned_data['username']
        password = form.cleaned_data['password']
        user = authenticate(username=username, password=password)

        if user is not None:
            login(self.request, user)
            return super().form_valid(form)
        else:
            return HttpResponse("<h1>Invalid username or password</h1>")

    def get_success_url(self):
        return '/dashboard/'

def signup_view(request):
    """View to handle user signup."""
    if request.method == 'POST':
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('dashboard')
    else:
        form = CustomUserCreationForm()
    return render(request, 'core/signup.html', {'form': form})

def home_view(request):
    """Home view."""
    return render(request, 'base.html')

def dashboard_view(request):
    """Dashboard view."""
    if request.user.is_authenticated:
        return render(request, 'core/dashboard.html')
    else:
        return redirect('login')
    
def ranking_view(request):
    if request.method == 'GET':
        context = {
            'username': request.user.username,
            'rankings': [
                {'username': 'JohnDoe', 'score': 95},
                {'username': 'JaneSmith', 'score': 90},
                {'username': 'AliceBrown', 'score': 85},
            ]
        }
        return render(request, 'core/ranking.html', context)